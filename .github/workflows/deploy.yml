name: Deploy Drupal to Production

# Trigger on push to main branch (after PR merge)
on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Drupal to Production
    runs-on: ubuntu-latest
    
    # Environment protection - requires manual approval
    environment:
      name: production
      url: https://yt.hardsocket.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # Navigate to Drupal production directory
            cd /var/www/yt.hardsocket.com/app
            
            # Backup database before deployment
            drush sql-dump --gzip --result-file=/var/backups/drupal/db-backup-$(date +%Y%m%d-%H%M%S).sql.gz || true
            
            # Enable maintenance mode
            drush state:set system.maintenance_mode 1
            drush cache:rebuild
            
            # Pull latest code
            git fetch origin
            git reset --hard origin/main
            
            # Run deployment script
            if [ -f "./scripts/deploy.sh" ]; then
              ./scripts/deploy.sh
            else
              # Inline deployment commands if script doesn't exist
              
              # Install composer dependencies (production mode)
              composer install --no-dev --optimize-autoloader --no-interaction
              
              # Run database updates
              drush updatedb -y
              
              # Import configuration if exists
              if [ -d "config/sync" ]; then
                drush config:import -y || true
              fi
              
              # Clear all caches
              drush cache:rebuild
              
              # Set file permissions
              chown -R www-data:www-data web/sites/default/files || true
              find web/sites/default/files -type d -exec chmod 755 {} \; || true
              find web/sites/default/files -type f -exec chmod 644 {} \; || true
              
              # Protect settings file
              chmod 444 web/sites/default/settings.php || true
            fi
            
            # Disable maintenance mode
            drush state:set system.maintenance_mode 0
            drush cache:rebuild
      
      - name: Health check
        run: |
          sleep 10
          response=$(curl -s -o /dev/null -w "%{http_code}" https://yt.hardsocket.com)
          if [ $response -eq 200 ] || [ $response -eq 301 ] || [ $response -eq 302 ]; then
            echo "✅ Drupal site is accessible"
          else
            echo "❌ Drupal health check failed with status: $response"
            exit 1
          fi
      
      - name: Discord Notification
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "Drupal Deployment"
          description: |
            **Status:** ${{ job.status }}
            **Repository:** Drupal
            **Branch:** main
            **Commit:** `${{ github.sha }}`
            **Author:** ${{ github.actor }}
            **URL:** https://yt.hardsocket.com
          color: ${{ job.status == 'success' && '0x00ff00' || job.status == 'failure' && '0xff0000' || '0xffff00' }}
          username: GitHub Actions
          avatar_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
        continue-on-error: true