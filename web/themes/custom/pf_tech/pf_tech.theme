<?php

/**
 * @file
 * Theme functions for PF Tech.
 */

declare(strict_types=1);

/**
 * Implements hook_page_attachments().
 *
 * Attach PF Tech libraries globally.
 */
function pf_tech_page_attachments(array &$attachments): void {
  // Base/global styling and components are already referenced via info.yml libraries,
  // but attaching here ensures they load even if info.yml changes later.
  $attachments['#attached']['library'][] = 'pf_tech/base';
  $attachments['#attached']['library'][] = 'pf_tech/components';
  $attachments['#attached']['library'][] = 'pf_tech/code';
  $attachments['#attached']['library'][] = 'pf_tech/dark';
}

/**
 * Implements hook_preprocess_node().
 *
 * Attach content type specific libraries and add custom classes.
 */
function pf_tech_preprocess_node(array &$variables): void {
  $node = $variables['node'];
  
  // Attach YouTube article specific styles only on YouTube article nodes
  if ($node->bundle() === 'youtube_article') {
    $variables['#attached']['library'][] = 'pf_tech/yt_article';
    
    // Add custom classes for better styling hooks
    $variables['attributes']['class'][] = 'yt-article';
    
    // Add view mode specific class
    if (!empty($variables['view_mode'])) {
      $variables['attributes']['class'][] = 'yt-article--view-mode-' . str_replace('_', '-', $variables['view_mode']);
    }
  }
}

/**
 * Implements hook_preprocess_field().
 *
 * Add Tailwind classes to fields based on field type and name.
 */
function pf_tech_preprocess_field(array &$variables): void {
  $field_name = $variables['field_name'];
  $field_type = $variables['field_type'];
  
  // Add Tailwind classes for specific field types
  switch ($field_type) {
    case 'image':
      $variables['attributes']['class'][] = 'field--image-tailwind';
      break;
      
    case 'text_long':
    case 'text_with_summary':
      $variables['attributes']['class'][] = 'field--text-tailwind';
      break;
      
    case 'entity_reference':
      // For taxonomy term references (tags, categories)
      if (isset($variables['element']['#field_name'])) {
        $name = $variables['element']['#field_name'];
        if (strpos($name, 'tag') !== FALSE || strpos($name, 'categor') !== FALSE) {
          $variables['attributes']['class'][] = 'field--tags-tailwind';
        }
      }
      break;
  }
  
  // Add responsive spacing classes
  $variables['attributes']['class'][] = 'field-spacing';
}

/**
 * Implements hook_preprocess_page().
 *
 * Add Tailwind-friendly classes to page regions.
 */
function pf_tech_preprocess_page(array &$variables): void {
  // Add container classes to content region
  if (isset($variables['page']['content'])) {
    $variables['content_attributes']['class'][] = 'content-region';
  }
  
  // Add responsive classes based on sidebar existence
  $has_sidebar_first = !empty($variables['page']['sidebar_first']);
  $has_sidebar_second = !empty($variables['page']['sidebar_second']);
  
  if ($has_sidebar_first || $has_sidebar_second) {
    $variables['content_attributes']['class'][] = 'with-sidebar';
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * Add Tailwind classes to blocks.
 */
function pf_tech_preprocess_block(array &$variables): void {
  // Add base block classes
  $variables['attributes']['class'][] = 'block-tailwind';
  $variables['attributes']['class'][] = 'mb-6';
  
  // Add specific classes based on block type
  if (isset($variables['plugin_id'])) {
    $plugin_parts = explode(':', $variables['plugin_id']);
    $block_type = $plugin_parts[0];
    
    switch ($block_type) {
      case 'system_menu_block':
        $variables['attributes']['class'][] = 'block--menu';
        break;
        
      case 'views_block':
        $variables['attributes']['class'][] = 'block--views';
        break;
        
      case 'block_content':
        $variables['attributes']['class'][] = 'block--custom drupal-card';
        break;
    }
  }
}

/**
 * Implements hook_preprocess_region().
 *
 * Add Tailwind classes to regions based on region name.
 */
function pf_tech_preprocess_region(array &$variables): void {
  $region = $variables['region'];
  
  // Add base region classes
  $variables['attributes']['class'][] = 'region-tailwind';
  
  // Add specific classes based on region
  switch ($region) {
    case 'secondary_menu':
      // These classes are already in the template, but can be added here too
      $variables['attributes']['class'][] = 'bg-drupal-primary';
      $variables['attributes']['class'][] = 'text-white';
      break;
      
    case 'header':
      $variables['attributes']['class'][] = 'bg-white';
      $variables['attributes']['class'][] = 'shadow-sm';
      break;
      
    case 'primary_menu':
      $variables['attributes']['class'][] = 'flex';
      $variables['attributes']['class'][] = 'items-center';
      break;
      
    case 'highlighted':
      $variables['attributes']['class'][] = 'bg-blue-50';
      $variables['attributes']['class'][] = 'border-b';
      $variables['attributes']['class'][] = 'border-blue-200';
      $variables['attributes']['class'][] = 'py-4';
      break;
      
    case 'footer':
    case 'footer_first':
    case 'footer_second':
    case 'footer_third':
    case 'footer_fourth':
    case 'footer_fifth':
      $variables['attributes']['class'][] = 'text-gray-300';
      break;
      
    case 'sidebar_first':
    case 'sidebar_second':
      $variables['attributes']['class'][] = 'sidebar-region';
      break;
  }
}

/**
 * Implements hook_preprocess_form().
 *
 * Add Tailwind classes to forms.
 */
function pf_tech_preprocess_form(array &$variables): void {
  // Add classes specifically for YT to Article form
  if (isset($variables['element']['#form_id']) && $variables['element']['#form_id'] === 'yt_to_article_form') {
    $variables['attributes']['class'][] = 'yt-to-article-tailwind';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for forms.
 */
function pf_tech_theme_suggestions_form_alter(array &$suggestions, array $variables): void {
  // Add form ID as a suggestion
  if (isset($variables['element']['#form_id'])) {
    $form_id = str_replace('_', '-', $variables['element']['#form_id']);
    $suggestions[] = 'form__' . $form_id;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for blocks.
 */
function pf_tech_theme_suggestions_block_alter(array &$suggestions, array $variables): void {
  // Add content block suggestions
  if (isset($variables['elements']['#plugin_id'])) {
    $plugin_parts = explode(':', $variables['elements']['#plugin_id']);
    
    // For system blocks placed in content region
    if ($plugin_parts[0] === 'system' && isset($variables['elements']['#configuration']['region'])) {
      $region = $variables['elements']['#configuration']['region'];
      if ($region === 'content') {
        $suggestions[] = 'block__' . str_replace('_', '-', $region);
      }
    }
    
    // For inline blocks
    if ($plugin_parts[0] === 'inline_block') {
      $suggestions[] = 'block__inline_block';
    }
  }
  
  // Add theme-specific content block suggestion
  if (isset($variables['elements']['#configuration']['provider']) && $variables['elements']['#configuration']['provider'] === 'pf_tech') {
    $suggestions[] = 'block__pf_tech_content';
  }
}